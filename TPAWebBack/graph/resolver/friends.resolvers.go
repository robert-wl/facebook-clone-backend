package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/yahkerobertkertasnya/TPAWebBack/graph/model"
)

// AddFriend is the resolver for the addFriend field.
func (r *mutationResolver) AddFriend(ctx context.Context, friendInput model.FriendInput) (*model.Friend, error) {
	var friendModel *model.Friend

	if err := r.DB.First(&friendModel, "sender_id = ? and receiver_id = ?", friendInput.Sender, friendInput.Receiver).Error; err != nil {
		friend := &model.Friend{
			SenderID:   friendInput.Sender,
			ReceiverID: friendInput.Receiver,
			Accepted:   false,
		}

		if err := r.DB.Save(&friend).Error; err != nil {
			return nil, err
		}

		if err := r.DB.Preload("Sender").Preload("Receiver").First(&friend, "sender_id = ? and receiver_id = ?", friend.SenderID, friend.ReceiverID).Error; err != nil {
			return nil, err
		}

		return friend, nil
	} else {
		return nil, r.DB.Delete(&friendModel).Error
	}

}

// AcceptFriend is the resolver for the acceptFriend field.
func (r *mutationResolver) AcceptFriend(ctx context.Context, friend string) (*model.Friend, error) {
	var friendModel *model.Friend
	userID := ctx.Value("UserID").(string)

	if err := r.DB.First(&friendModel, "sender_id = ? and receiver_id = ?", friend, userID).Update("Accepted", true).Error; err != nil {
		return nil, err
	}

	return friendModel, nil
}

// RejectFriend is the resolver for the rejectFriend field.
func (r *mutationResolver) RejectFriend(ctx context.Context, friend string) (*model.Friend, error) {
	userID := ctx.Value("UserID").(string)

	friendModel := &model.Friend{
		SenderID:   friend,
		ReceiverID: userID,
		Accepted:   false,
	}

	if err := r.DB.Delete(&friendModel).Error; err != nil {
		return nil, err
	}

	return friendModel, nil
}

// GetFriends is the resolver for the getFriends field.
func (r *queryResolver) GetFriends(ctx context.Context) ([]*model.Friend, error) {
	var friends []*model.Friend

	userID := ctx.Value("UserID").(string)
	if err := r.DB.Preload("Receiver").Preload("Sender").Find(&friends, "sender_id = ? or receiver_id = ?", userID, userID).Error; err != nil {
		return nil, err
	}

	return friends, nil
}
