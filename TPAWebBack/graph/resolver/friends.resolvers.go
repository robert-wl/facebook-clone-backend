package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"github.com/yahkerobertkertasnya/TPAWebBack/graph/model"
)

// AddFriend is the resolver for the addFriend field.
func (r *mutationResolver) AddFriend(ctx context.Context, friendInput model.FriendInput) (*model.Friend, error) {
	var friendModel *model.Friend

	if err := r.DB.First(&friendModel, "sender_id = ? and receiver_id = ?", friendInput.Sender, friendInput.Receiver).Error; err != nil {
		friend := &model.Friend{
			SenderID:   friendInput.Sender,
			ReceiverID: friendInput.Receiver,
			Accepted:   false,
		}

		if err := r.DB.Save(&friend).Error; err != nil {
			return nil, err
		}

		if err := r.DB.Preload("Sender").Preload("Receiver").First(&friend, "sender_id = ? and receiver_id = ?", friend.SenderID, friend.ReceiverID).Error; err != nil {
			return nil, err
		}

		return friend, nil
	} else {
		return nil, r.DB.Delete(&friendModel).Error
	}
}

// AcceptFriend is the resolver for the acceptFriend field.
func (r *mutationResolver) AcceptFriend(ctx context.Context, friend string) (*model.Friend, error) {
	var friendModel *model.Friend
	userID := ctx.Value("UserID").(string)

	if err := r.DB.First(&friendModel, "sender_id = ? and receiver_id = ?", friend, userID).Update("Accepted", true).Error; err != nil {
		return nil, err
	}

	return friendModel, nil
}

// RejectFriend is the resolver for the rejectFriend field.
func (r *mutationResolver) RejectFriend(ctx context.Context, friend string) (*model.Friend, error) {
	userID := ctx.Value("UserID").(string)

	friendModel := &model.Friend{
		SenderID:   friend,
		ReceiverID: userID,
		Accepted:   false,
	}

	if err := r.DB.Delete(&model.Friend{}, "(sender_id = ? AND receiver_id = ?)", friend, userID).Error; err != nil {
		return nil, err
	}

	return friendModel, nil
}

// GetFriends is the resolver for the getFriends field.
func (r *queryResolver) GetFriends(ctx context.Context, username string) ([]*model.User, error) {
	var user *model.User
	var users []*model.User

	if err := r.DB.First(&user, "username = ?", username).Error; err != nil {
		return nil, err
	}

	subQuery := r.DB.
		Model(&model.Friend{}).
		Where("(sender_id = ? OR receiver_id = ? AND accepted = ?)", user.ID, user.ID, true).
		Select("DISTINCT CASE WHEN sender_id = ? THEN receiver_id ELSE sender_id END", user.ID)

	if err := r.DB.Find(&users, "id IN (?)", subQuery).Error; err != nil {
		return nil, err
	}

	return users, nil
}

// GetFriendRequests is the resolver for the getFriendRequests field.
func (r *queryResolver) GetFriendRequests(ctx context.Context) ([]*model.User, error) {
	var users []*model.User

	userID := ctx.Value("UserID").(string)

	subQuery := r.DB.
		Model(&model.Friend{}).
		Where("receiver_id = ? AND accepted = ?", userID, false).
		Select("DISTINCT sender_id")

	if err := r.DB.Find(&users, "id IN (?)", subQuery).Error; err != nil {
		return nil, err
	}

	return users, nil
}

// GetUserFriends is the resolver for the getUserFriends field.
func (r *queryResolver) GetUserFriends(ctx context.Context, username string) ([]*model.User, error) {
	var userIds []string
	var user *model.User
	var users []*model.User

	if err := r.DB.First(&user, "username = ?", username).Error; err != nil {
		return nil, err
	}

	if err := r.DB.
		Model(&model.Friend{}).
		Where("sender_id = ? OR receiver_id = ? AND accepted = ?", user.ID, user.ID, true).
		Select("DISTINCT CASE WHEN sender_id = ? THEN receiver_id ELSE sender_id END", user.ID).
		Find(&userIds).Error; err != nil {
		return nil, err
	}

	if err := r.DB.Find(&users, "id IN (?)", userIds).Error; err != nil {
		return nil, err
	}

	return users, nil
}

// GetUserMutuals is the resolver for the getUserMutuals field.
func (r *queryResolver) GetUserMutuals(ctx context.Context, username string) ([]*model.User, error) {
	var users []*model.User
	var user *model.User
	var friendIDs []string
	var myFriendIDs []string

	if err := r.DB.Find(&user, "username = ?", username).Error; err != nil {
		return nil, err
	}

	if err := r.DB.
		Model(&model.Friend{}).
		Where("sender_id = ? OR receiver_id = ?", user.ID, user.ID).
		Select("DISTINCT CASE WHEN sender_id = ? THEN receiver_id ELSE sender_id END", user.ID).
		Find(&friendIDs).Error; err != nil {
		return nil, err
	}

	userID := ctx.Value("UserID").(string)

	if err := r.DB.Model(&model.Friend{}).
		Where("sender_id = ? OR receiver_id = ? AND accepted = ?", userID, userID, true).
		Select("DISTINCT CASE WHEN sender_id = ? THEN receiver_id ELSE sender_id END", userID).Find(&myFriendIDs).Error; err != nil {
		return nil, err
	}
	if err := r.DB.Find(&users, "id IN (?) AND id IN (?)", friendIDs, myFriendIDs).Error; err != nil {
		return nil, err
	}

	return users, nil
}

// GetPeopleMightKnow is the resolver for the getPeopleMightKnow field.
func (r *queryResolver) GetPeopleMightKnow(ctx context.Context) ([]*model.User, error) {
	var userIds []string
	var userFriendIds []string
	var users []*model.User
	userID := ctx.Value("UserID").(string)

	if err := r.DB.Model(&model.Friend{}).
		Where("sender_id = ? OR receiver_id = ? AND accepted = ?", userID, userID, true).
		Select("DISTINCT CASE WHEN sender_id = ? THEN receiver_id ELSE sender_id END", userID).Find(&userIds).Error; err != nil {
		return nil, err
	}

	if err := r.DB.Model(&model.Friend{}).
		Where("sender_id IN (?) OR receiver_id IN (?) AND accepted = ?", userIds, userIds, true).
		Select("DISTINCT CASE WHEN sender_id IN (?) THEN receiver_id ELSE sender_id END", userIds).Find(&userFriendIds).Error; err != nil {
		return nil, err
	}

	if err := r.DB.
		Limit(5).
		Find(&users, "id IN (?) AND id NOT IN (?) AND id != ?", userFriendIds, userIds, userID).Error; err != nil {
		return nil, err
	}

	return users, nil
}
