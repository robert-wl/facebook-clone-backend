package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/yahkerobertkertasnya/TPAWebBack/graph/model"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, newPost *model.NewPost) (*model.Post, error) {
	userID := ctx.Value("UserID").(string)

	post := &model.Post{
		ID:           uuid.NewString(),
		UserID:       userID,
		Content:      newPost.Content,
		Privacy:      newPost.Privacy,
		LikeCount:    0,
		CommentCount: 0,
		ShareCount:   0,
		Files:        newPost.Files,
		CreatedAt:    time.Now(),
	}

	if err := r.DB.Save(&post).Error; err != nil {
		return nil, err
	}

	return post, nil
}

// GetPost is the resolver for the getPost field.
func (r *queryResolver) GetPost(ctx context.Context, id string) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: GetPost - getPost"))
}

// GetPosts is the resolver for the getPosts field.
func (r *queryResolver) GetPosts(ctx context.Context) ([]*model.Post, error) {
	var posts *[]*model.Post

	if err := r.DB.
		Order("created_at desc").
		Preload("User").
		Preload("Likes").
		Preload("Comments").
		Find(&posts).Error; err != nil {
		return nil, err
	}

	return *posts, nil
}
