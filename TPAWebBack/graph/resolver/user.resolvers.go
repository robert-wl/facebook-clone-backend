package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/yahkerobertkertasnya/TPAWebBack/graph"
	"github.com/yahkerobertkertasnya/TPAWebBack/graph/model"
	"github.com/yahkerobertkertasnya/TPAWebBack/helper"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	activationId := uuid.NewString()

	user := &model.User{
		ID:         uuid.NewString(),
		FirstName:  input.FirstName,
		LastName:   input.LastName,
		Username:   input.Username,
		Email:      input.Email,
		Dob:        input.Dob,
		Gender:     input.Gender,
		Active:     false,
		MiscId:     &activationId,
		Profile:    nil,
		Background: nil,
	}

	if hashed, err := helper.EncryptPassword(input.Password); err != nil {
		return nil, err
	} else {
		user.Password = hashed
	}

	if err := r.DB.Save(&user).Error; err != nil {
		return nil, err
	}

	//TODO: send email

	return user, nil
}

// ActivateUser is the resolver for the activateUser field.
func (r *mutationResolver) ActivateUser(ctx context.Context, id string) (*model.User, error) {
	var user *model.User

	if err := r.DB.First(&user, "activation_id = ?", id).Update("active", true).Update("activation_id", nil).Error; err != nil {
		return nil, err
	}

	return user, nil
}

// AuthenticateUser is the resolver for the authenticateUser field.
func (r *mutationResolver) AuthenticateUser(ctx context.Context, email string, password string) (string, error) {
	var user *model.User

	if err := r.DB.First(&user, "email = ?", email).Error; err != nil {
		return "", fmt.Errorf("credentials not found")
	}

	if user.Active == false {
		return "", fmt.Errorf("user is not active")
	}

	if !helper.ComparePassword(user.Password, password) {
		return "", fmt.Errorf("incorrect password")
	}

	return helper.CreateJWT(user.ID)
}

// ForgotPassword is the resolver for the forgotPassword field.
func (r *mutationResolver) ForgotPassword(ctx context.Context, email string) (bool, error) {
	forgotId := uuid.NewString()

	if err := r.DB.First(&model.User{}, "email = ?", email).Update("misc_id", forgotId).Error; err != nil {
		return false, err
	}
	//TODO: send email

	return true, nil
}

// ResetPassword is the resolver for the resetPassword field.
func (r *mutationResolver) ResetPassword(ctx context.Context, id string, password string) (*model.User, error) {
	var user *model.User

	if err := r.DB.First(&user, "misc_id = ?", id).Error; err != nil {
		return nil, err
	}

	if helper.ComparePassword(user.Password, password) {
		return nil, fmt.Errorf("password cannot be the same")
	}

	if hashedP, err := helper.EncryptPassword(password); err != nil {
		return nil, err
	} else {
		user.Password = hashedP
	}

	user.MiscId = nil

	if err := r.DB.Save(&user).Error; err != nil {
		return nil, err
	}

	return user, nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: GetUser - getUser"))
}

// GetUsers is the resolver for the getUsers field.
func (r *queryResolver) GetUsers(ctx context.Context) ([]*model.User, error) {
	var users []*model.User

	if err := r.DB.Find(&users).Error; err != nil {
		return nil, err
	}

	return users, nil
}

// CheckActivateLink is the resolver for the checkActivateLink field.
func (r *queryResolver) CheckActivateLink(ctx context.Context, id string) (bool, error) {
	if err := r.DB.First(&model.User{}, "not active and misc_id = ?", id).Error; err != nil {
		return false, err
	}

	return true, nil
}

// CheckResetLink is the resolver for the checkResetLink field.
func (r *queryResolver) CheckResetLink(ctx context.Context, id string) (bool, error) {
	if err := r.DB.First(&model.User{}, "active and misc_id = ?", id).Error; err != nil {
		return false, err
	}

	return true, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
