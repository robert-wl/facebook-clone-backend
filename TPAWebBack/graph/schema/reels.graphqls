

type Reel {
    id: ID!
    user: User!
    content: String!
    video: String!
    likeCount: Int!
    commentCount: Int!
    shareCount: Int!
    likes: [ReelLike]
    comments: [ReelComment]
    liked: Boolean
    createdAt: Time!
}

type ReelLike {
    reelId: ID!
    user: User!
}

type ReelComment {
    id: ID!
    user: User!
    content: String!
    likeCount: Int!
    replyCount: Int!
    parentReel: Reel
    parentComment: ReelComment
    likes: [ReelCommentLike]
    comments: [ReelComment]
    liked: Boolean
    createdAt: Time!
}

type ReelCommentLike {
    reelCommentId: ID!
    user: User!
}

input NewReel {
    content: String!
    video: String!
}

input NewReelComment {
    content: String!
    parentReel: ID
    parentComment: ID
}

extend type Query {
    getReels: [ID] @auth
    getReel(id: ID!): Reel! @auth
    getReelComments(reelId: ID!): [ReelComment]! @auth
}

extend type Mutation {
    createReel(reel: NewReel!): Reel! @auth
    createReelComment(comment: NewReelComment!): ReelComment! @auth
    likeReel(reelId: ID!): ReelLike! @auth
    likeReelComment(reelCommentId: ID!): ReelCommentLike! @auth
}


