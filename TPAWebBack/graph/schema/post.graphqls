

type Post {
    id: ID!
    user: User!
    content: String!
    privacy: String!
    likeCount: Int!
    commentCount: Int!
    shareCount: Int!
    files: [String]
    likes: [PostLike]
    comments: [Comment]
    liked: Boolean
    createdAt: Time!
}

type PostLike {
    postId: ID!
    user: User!
}

type Comment {
    id: ID!
    user: User!
    content: String!
    likeCount: Int!
    replyCount: Int!
    parentPost: Post
    parentComment: Comment
    likes: [CommentLike]
    comments: [Comment]
    liked: Boolean
    createdAt: Time!
}

type CommentLike {
    commentId: ID!
    user: User!
}

input NewPost {
    content: String!
    privacy: String!
    files: [String]
}

input NewComment {
    content: String!
    parentPost: ID
    parentComment: ID
}

input Pagination {
    start: Int!
    limit: Int!
}

extend type Query {
    getPost(id: ID!): Post @auth
    getPosts(pagination: Pagination!): [Post] @auth
    getCommentPost(postID: ID!): [Comment] @auth
}

extend type Mutation {
    createPost(newPost: NewPost!): Post @auth
    createComment(newComment: NewComment!): Comment @auth
    likePost(postID: ID!): PostLike @auth
    likecomment(commentID: ID!): CommentLike @auth
}