package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/yahkerobertkertasnya/facebook-clone-backend/graph/model"
)

func (r *mutationResolver) createPostNotification(ctx context.Context, user model.User, postID string) {
	var userIDs []string

	subQuery := r.DB.
		Model(&model.Friend{}).
		Where("(sender_id = ? OR receiver_id = ? AND accepted = ?)", user.ID, user.ID, true).
		Where("(sender_id = ? OR receiver_id = ? AND accepted = ?)", user.ID, user.ID, true).
		Select("DISTINCT CASE WHEN sender_id = ? THEN receiver_id ELSE sender_id END", user.ID)

	subQueryBlocked := r.DB.
		Model(&model.BlockNotification{}).
		Where("(sender_id = ?)", user.ID).
		Select("DISTINCT receiver_id")

	if err := r.DB.
		Model(&model.User{}).
		Where("id IN (?) AND id NOT IN (?) AND id != ?", subQuery, subQueryBlocked, user.ID).
		Select("id").
		Find(&userIDs).Error; err != nil {
		return
	}

	for _, userId := range userIDs {

		newNotification := &model.NewNotification{
			Message: fmt.Sprintf("%s %s posted a new post", user.FirstName, user.LastName),
			UserID:  userId,
			PostID:  &postID,
			ReelID:  nil,
			StoryID: nil,
			GroupID: nil,
		}

		if _, err := r.CreateNotification(ctx, *newNotification); err != nil {
			continue
		}
	}
}

func (r *mutationResolver) createLikeNotification(ctx context.Context, userID string, postID string) {
	var user *model.User

	if err := r.DB.First(&user, "id = ?", userID).Error; err != nil {
		return
	}

	var userIDs []string

	subQuery := r.DB.
		Model(&model.Friend{}).
		Where("(sender_id = ? OR receiver_id = ? AND accepted = ?)", user.ID, user.ID, true).
		Select("DISTINCT CASE WHEN sender_id = ? THEN receiver_id ELSE sender_id END", user.ID)

	subQueryBlocked := r.DB.
		Model(&model.BlockNotification{}).
		Where("(sender_id = ?)", user.ID).
		Select("DISTINCT receiver_id")

	if err := r.DB.
		Model(&model.User{}).
		Where("id IN (?) AND id NOT IN (?) AND id != ?", subQuery, subQueryBlocked, user.ID).
		Select("id").
		Find(&userIDs).Error; err != nil {
		return
	}

	for _, userId := range userIDs {

		newNotification := &model.NewNotification{
			Message: fmt.Sprintf("%s %s liked a post", user.FirstName, user.LastName),
			UserID:  userId,
			PostID:  &postID,
			ReelID:  nil,
			StoryID: nil,
			GroupID: nil,
		}

		if _, err := r.CreateNotification(ctx, *newNotification); err != nil {
			continue
		}
	}
}

func (r *mutationResolver) createCommentNotification(ctx context.Context, user model.User, newComment model.NewComment) {
	var users []*model.User

	subQuery := r.DB.
		Model(&model.Friend{}).
		Where("(sender_id = ? OR receiver_id = ? AND accepted = ?)", user.ID, user.ID, true).
		Select("DISTINCT CASE WHEN sender_id = ? THEN receiver_id ELSE sender_id END", user.ID)

	subQueryBlocked := r.DB.
		Model(&model.BlockNotification{}).
		Where("(sender_id = ?)", user.ID).
		Select("DISTINCT receiver_id")

	if err := r.DB.Find(&users, "id IN (?) AND id NOT IN (?) AND id != ?", subQuery, subQueryBlocked, user.ID).Error; err != nil {
		return
	}

	if newComment.ParentPost == nil {
		var comment *model.Comment

		if err := r.DB.First(&comment, "id = ?", newComment.ParentComment).Error; err != nil {
			return
		}

		for _, userDat := range users {

			newNotification := &model.NewNotification{
				Message: fmt.Sprintf("%s %s replied a comment", user.FirstName, user.LastName),
				UserID:  userDat.ID,
				PostID:  comment.ParentPostID,
				ReelID:  nil,
				StoryID: nil,
				GroupID: nil,
			}

			if _, err := r.CreateNotification(ctx, *newNotification); err != nil {
				continue
			}
		}
		r.Redis.Del(ctx, fmt.Sprintf("comment:%s:reply", *newComment.ParentComment))
	} else {
		for _, userDat := range users {

			newNotification := &model.NewNotification{
				Message: fmt.Sprintf("%s %s commented on a post", user.FirstName, user.LastName),
				UserID:  userDat.ID,
				PostID:  newComment.ParentPost,
				ReelID:  nil,
				StoryID: nil,
				GroupID: nil,
			}

			fmt.Println(newNotification)
			if _, err := r.CreateNotification(ctx, *newNotification); err != nil {
				fmt.Println(err)
				continue
			}
		}
		r.Redis.Del(ctx, fmt.Sprintf("post:%s:comment", *newComment.ParentPost))
	}
}

// CreateNotification is the resolver for the createNotification field.
func (r *mutationResolver) CreateNotification(ctx context.Context, notification model.NewNotification) (*model.Notification, error) {
	var blocked *model.BlockNotification
	userID := ctx.Value("UserID").(string)

	if err := r.DB.First(&blocked, "sender_id = ? AND receiver_id = ?", userID, notification.UserID).Error; err == nil && blocked != nil {
		return nil, nil
	}

	newNotification := &model.Notification{
		ID:        uuid.NewString(),
		Message:   notification.Message,
		UserID:    notification.UserID,
		SenderID:  userID,
		Seen:      false,
		PostID:    notification.PostID,
		ReelID:    notification.ReelID,
		StoryID:   notification.StoryID,
		GroupID:   notification.GroupID,
		CreatedAt: time.Now(),
	}

	if err := r.DB.Save(&newNotification).Error; err != nil {
		fmt.Println(err)
		return nil, err
	}

	r.Redis.Del(ctx, fmt.Sprintf("notifications:%s:user", notification.UserID))

	return newNotification, nil
}

// GetUnreadNotifications is the resolver for the getUnreadNotifications field.
func (r *mutationResolver) GetUnreadNotifications(ctx context.Context) ([]*model.Notification, error) {
	var notifications []*model.Notification
	userID := ctx.Value("UserID").(string)

	if err := r.DB.
		Order("created_at DESC").
		Preload("Sender").
		Find(&notifications, "user_id = ? AND seen = false", userID).Error; err != nil {
		return nil, err
	}

	go func() {
		for _, notification := range notifications {

			notification.Seen = true
			if err := r.DB.Save(&notification).Error; err != nil {
				continue
			}
		}
	}()

	return notifications, nil
}

// BlockUser is the resolver for the blockUser field.
func (r *mutationResolver) BlockUser(ctx context.Context, username string) (*model.BlockNotification, error) {
	var user *model.User
	userID := ctx.Value("UserID").(string)

	if err := r.DB.First(&user, "username = ?", username).Error; err != nil {
		return nil, err
	}

	if serializedUser, err := r.Redis.Get(ctx, fmt.Sprintf(`user:%s`, user.ID)).Result(); err != nil {

		if serializedUser, err := json.Marshal(user); err != nil {
			return nil, err
		} else {
			r.Redis.Set(ctx, fmt.Sprintf(`user:%s`, username), serializedUser, 10*60*time.Minute)
		}

	} else {
		if err := json.Unmarshal([]byte(serializedUser), &user); err != nil {
			return nil, err
		}
	}

	var blockNotif *model.BlockNotification

	if err := r.DB.First(&blockNotif, "sender_id = ? AND receiver_id = ?", user.ID, userID).Error; err == nil && blockNotif != nil {

		if err := r.DB.Delete(&blockNotif).Error; err != nil {
			return nil, err
		}

		r.Redis.Del(ctx, fmt.Sprintf("user:%s:blocked:%s", userID, user.ID))
		return blockNotif, nil
	}

	blockNotif = &model.BlockNotification{
		SenderID:   user.ID,
		ReceiverID: userID,
	}

	if err := r.DB.Save(&blockNotif).Error; err != nil {
		return nil, err
	}

	r.Redis.Del(ctx, fmt.Sprintf("user:%s:blocked:%s", userID, user.ID))

	return blockNotif, nil
}

// GetNotifications is the resolver for the getNotifications field.
func (r *queryResolver) GetNotifications(ctx context.Context) ([]*model.Notification, error) {
	var notifications []*model.Notification
	userID := ctx.Value("UserID").(string)

	if notificationsSerialized, err := r.Redis.Get(ctx, fmt.Sprintf("notifications:%s:user", userID)).Result(); err != nil {
		if err := r.DB.
			Order("created_at DESC").
			Preload("Sender").
			Find(&notifications, "user_id = ?", userID).Error; err != nil {
			return nil, err
		}

		if notificationsSerialized, err := json.Marshal(notifications); err != nil {
			return nil, err
		} else {
			r.Redis.Set(ctx, fmt.Sprintf("notifications:%s:user", userID), notificationsSerialized, 10*time.Minute)
		}
	} else {
		if err := json.Unmarshal([]byte(notificationsSerialized), &notifications); err != nil {
			return nil, err
		}
	}

	return notifications, nil
}
