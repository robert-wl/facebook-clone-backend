package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"github.com/yahkerobertkertasnya/facebook-clone-backend/graph/model"
)

// AddFriend is the resolver for the addFriend field.
func (r *mutationResolver) AddFriend(ctx context.Context, friendInput model.FriendInput) (*model.Friend, error) {
	userID := ctx.Value("UserID").(string)
	return r.FriendsService.AddFriend(userID, friendInput)
}

// AcceptFriend is the resolver for the acceptFriend field.
func (r *mutationResolver) AcceptFriend(ctx context.Context, friend string) (*model.Friend, error) {
	userID := ctx.Value("UserID").(string)

	return r.FriendsService.AcceptFriend(userID, friend)
}

// RejectFriend is the resolver for the rejectFriend field.
func (r *mutationResolver) RejectFriend(ctx context.Context, friend string) (*model.Friend, error) {
	userID := ctx.Value("UserID").(string)

	return r.FriendsService.RejectFriend(userID, friend)
}

// GetFriends is the resolver for the getFriends field.
func (r *queryResolver) GetFriends(ctx context.Context) ([]*model.User, error) {
	userID := ctx.Value("UserID").(string)

	return r.FriendsService.GetFriends(userID)
}

// GetFriendRequests is the resolver for the getFriendRequests field.
func (r *queryResolver) GetFriendRequests(ctx context.Context) ([]*model.User, error) {
	userID := ctx.Value("UserID").(string)

	return r.FriendsService.GetFriendRequests(userID)
}

// GetUserFriends is the resolver for the getUserFriends field.
func (r *queryResolver) GetUserFriends(ctx context.Context, username string) ([]*model.User, error) {
	return r.FriendsService.GetUserFriends(username)
}

// GetUserMutuals is the resolver for the getUserMutuals field.
func (r *queryResolver) GetUserMutuals(ctx context.Context, username string) ([]*model.User, error) {
	userID := ctx.Value("UserID").(string)

	return r.FriendsService.GetUserMutuals(userID, username)
}

// GetPeopleMightKnow is the resolver for the getPeopleMightKnow field.
func (r *queryResolver) GetPeopleMightKnow(ctx context.Context) ([]*model.User, error) {
	userID := ctx.Value("UserID").(string)

	return r.FriendsService.GetPeopleMightKnow(userID)
}
