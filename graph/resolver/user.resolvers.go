package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"github.com/yahkerobertkertasnya/facebook-clone-backend/graph"
	"github.com/yahkerobertkertasnya/facebook-clone-backend/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	return r.UserService.CreateUser(input)
}

// ActivateUser is the resolver for the activateUser field.
func (r *mutationResolver) ActivateUser(ctx context.Context, id string) (*model.User, error) {
	return r.UserService.ActivateUser(id)
}

// AuthenticateUser is the resolver for the authenticateUser field.
func (r *mutationResolver) AuthenticateUser(ctx context.Context, email string, password string) (string, error) {
	return r.UserService.AuthenticateUser(email, password)
}

// ForgotPassword is the resolver for the forgotPassword field.
func (r *mutationResolver) ForgotPassword(ctx context.Context, email string) (bool, error) {
	return r.UserService.ForgotPassword(email)
}

// ResetPassword is the resolver for the resetPassword field.
func (r *mutationResolver) ResetPassword(ctx context.Context, id string, password string) (*model.User, error) {
	return r.UserService.ResetPassword(id, password)
}

// UpdateUserProfile is the resolver for the updateUserProfile field.
func (r *mutationResolver) UpdateUserProfile(ctx context.Context, profile string) (*model.User, error) {
	userID := ctx.Value("UserID").(string)
	return r.UserService.UpdateUserProfile(userID, profile)
}

// UpdateUserBackground is the resolver for the updateUserBackground field.
func (r *mutationResolver) UpdateUserBackground(ctx context.Context, background string) (*model.User, error) {
	userID := ctx.Value("UserID").(string)
	return r.UserService.UpdateUserBackground(userID, background)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUser) (*model.User, error) {
	userID := ctx.Value("UserID").(string)
	return r.UserService.UpdateUser(userID, input)
}

// UpdateTheme is the resolver for the updateTheme field.
func (r *mutationResolver) UpdateTheme(ctx context.Context, theme string) (*model.User, error) {
	userID := ctx.Value("UserID").(string)
	return r.UserService.UpdateTheme(userID, theme)
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, username string) (*model.User, error) {
	userID := ctx.Value("UserID").(string)
	return r.UserService.GetUser(userID, username)
}

// GetUsers is the resolver for the getUsers field.
func (r *queryResolver) GetUsers(ctx context.Context) ([]*model.User, error) {
	return r.UserService.GetUsers()
}

// CheckActivateLink is the resolver for the checkActivateLink field.
func (r *queryResolver) CheckActivateLink(ctx context.Context, id string) (bool, error) {
	return r.UserService.CheckActivateLink(id)
}

// CheckResetLink is the resolver for the checkResetLink field.
func (r *queryResolver) CheckResetLink(ctx context.Context, id string) (bool, error) {
	return r.UserService.CheckResetLink(id)
}

// GetAuth is the resolver for the getAuth field.
func (r *queryResolver) GetAuth(ctx context.Context) (*model.User, error) {
	userID := ctx.Value("UserID").(string)
	return r.UserService.GetAuth(userID)
}

// GetFilteredUsers is the resolver for the getFilteredUsers field.
func (r *queryResolver) GetFilteredUsers(ctx context.Context, filter string, pagination model.Pagination) ([]*model.User, error) {
	userID := ctx.Value("UserID").(string)
	return r.UserService.GetFilteredUsers(userID, filter, pagination)
}

// GetRandomUsers is the resolver for the getRandomUsers field.
func (r *queryResolver) GetRandomUsers(ctx context.Context, amount int) ([]*model.User, error) {
	return r.UserService.GetRandomUsers(amount)
}

// FriendCount is the resolver for the friendCount field.
func (r *userResolver) FriendCount(ctx context.Context, obj *model.User) (int, error) {
	userID := ctx.Value("UserID").(string)
	return r.UserService.FriendCount(userID)
}

// MutualCount is the resolver for the mutualCount field.
func (r *userResolver) MutualCount(ctx context.Context, obj *model.User) (int, error) {
	userID := ctx.Value("UserID").(string)
	return r.UserService.MutualCount(userID, obj)
}

// NotificationCount is the resolver for the notificationCount field.
func (r *userResolver) NotificationCount(ctx context.Context, obj *model.User) (int, error) {
	userID := ctx.Value("UserID").(string)
	return r.UserService.NotificationCount(userID)
}

// Friended is the resolver for the friended field.
func (r *userResolver) Friended(ctx context.Context, obj *model.User) (string, error) {
	userID := ctx.Value("UserID").(string)
	return r.UserService.Friended(userID, obj)
}

// Blocked is the resolver for the blocked field.
func (r *userResolver) Blocked(ctx context.Context, obj *model.User) (bool, error) {
	userID := ctx.Value("UserID").(string)
	return r.UserService.Blocked(userID, obj)
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

// User returns graph.UserResolver implementation.
func (r *Resolver) User() graph.UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
