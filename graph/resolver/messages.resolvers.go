package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"github.com/yahkerobertkertasnya/facebook-clone-backend/graph"
	"github.com/yahkerobertkertasnya/facebook-clone-backend/graph/model"
)

// CreateConversation is the resolver for the createConversation field.
func (r *mutationResolver) CreateConversation(ctx context.Context, username string) (*model.Conversation, error) {
	userID := ctx.Value("UserID").(string)

	return r.MessagesService.CreateConversation(userID, username)
}

// SendMessage is the resolver for the sendMessage field.
func (r *mutationResolver) SendMessage(ctx context.Context, conversationID string, message *string, image *string, postID *string) (*model.Message, error) {
	userID := ctx.Value("UserID").(string)

	return r.MessagesService.SendMessage(userID, conversationID, message, image, postID)
}

// GetConversations is the resolver for the getConversations field.
func (r *queryResolver) GetConversations(ctx context.Context) ([]*model.Conversation, error) {
	userID := ctx.Value("UserID").(string)

	return r.MessagesService.GetConversations(userID)
}

// ViewConversation is the resolver for the viewConversation field.
func (r *subscriptionResolver) ViewConversation(ctx context.Context, conversationID string) (<-chan []*model.Message, error) {
	return r.MessagesService.ViewConversation(ctx, conversationID)
}

// Subscription returns graph.SubscriptionResolver implementation.
func (r *Resolver) Subscription() graph.SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }
