package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"github.com/yahkerobertkertasnya/facebook-clone-backend/graph"
	"github.com/yahkerobertkertasnya/facebook-clone-backend/graph/model"
)

// CreateReel is the resolver for the createReel field.
func (r *mutationResolver) CreateReel(ctx context.Context, reel model.NewReel) (*model.Reel, error) {
	userID := ctx.Value("UserID").(string)
	return r.ReelsService.CreateReel(userID, reel)
}

// CreateReelComment is the resolver for the createReelComment field.
func (r *mutationResolver) CreateReelComment(ctx context.Context, comment model.NewReelComment) (*model.ReelComment, error) {
	userID := ctx.Value("UserID").(string)
	return r.ReelsService.CreateReelComment(userID, comment)
}

// LikeReel is the resolver for the likeReel field.
func (r *mutationResolver) LikeReel(ctx context.Context, reelID string) (*model.ReelLike, error) {
	userID := ctx.Value("UserID").(string)
	return r.ReelsService.LikeReel(userID, reelID)
}

// LikeReelComment is the resolver for the likeReelComment field.
func (r *mutationResolver) LikeReelComment(ctx context.Context, reelCommentID string) (*model.ReelCommentLike, error) {
	userID := ctx.Value("UserID").(string)
	return r.ReelsService.LikeReelComment(userID, reelCommentID)
}

// GetReels is the resolver for the getReels field.
func (r *queryResolver) GetReels(ctx context.Context) ([]*string, error) {
	return r.ReelsService.GetReels()
}

// GetReel is the resolver for the getReel field.
func (r *queryResolver) GetReel(ctx context.Context, id string) (*model.Reel, error) {
	userID := ctx.Value("UserID").(string)
	return r.ReelsService.GetReel(userID, id)
}

// GetReelComments is the resolver for the getReelComments field.
func (r *queryResolver) GetReelComments(ctx context.Context, reelID string) ([]*model.ReelComment, error) {
	return r.ReelsService.GetReelComments(reelID)
}

// LikeCount is the resolver for the likeCount field.
func (r *reelCommentResolver) LikeCount(ctx context.Context, obj *model.ReelComment) (int, error) {
	return r.ReelsService.LikeCount(obj)
}

// ReplyCount is the resolver for the replyCount field.
func (r *reelCommentResolver) ReplyCount(ctx context.Context, obj *model.ReelComment) (int, error) {
	return r.ReelsService.ReplyCount(obj)
}

// Comments is the resolver for the comments field.
func (r *reelCommentResolver) Comments(ctx context.Context, obj *model.ReelComment) ([]*model.ReelComment, error) {
	return r.ReelsService.Comments(obj)
}

// Liked is the resolver for the liked field.
func (r *reelCommentResolver) Liked(ctx context.Context, obj *model.ReelComment) (*bool, error) {
	userID := ctx.Value("UserID").(string)
	return r.ReelsService.Liked(userID, obj)
}

// ReelComment returns graph.ReelCommentResolver implementation.
func (r *Resolver) ReelComment() graph.ReelCommentResolver { return &reelCommentResolver{r} }

type reelCommentResolver struct{ *Resolver }
